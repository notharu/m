
const fs = require("fs");
const Collection = require("./Collection.js")
/**
 * A command Handler for DBD.JS Bots
 * @param {Object} bot - DBD.JS Client
 */

class CommandHandler {
    constructor(bot) {
    this.bot = bot 
        this.bot.client.CommandHandler = this
    }

    /**
     * Starting to handle commands in Directory
     * @param {String} path - The Absolute Path of Directory
     * @param {Boolean} strict - Throw an Error if the Method is not available
     */
    handle(path = this.Path || "./", strict = true) {
        const Path = this.resolvePath(path)
        this.strict = strict
        const bool = this.doesExist(path)
            if (!bool) {
                throw new Error("No Directory with Path exist!")
            } else {
                this.deleteBotCommands()
                this.loopPath(path)
            }
    }

    /**
     * Changes `loadCommands` path to your desires, therefore $updateCommands can work
     * @param {String} path - The path of a Directory
     */

    changeDBDLoadCommandsPath(path) {
        let Path = this.resolvePath(path)
        if (!require("path").isAbsolute(path)) {
            Path = this.resolvePath(process.cwd(), path)
        }

        this.bot.path = Path
    }

    resolvePath(path) {
        return require("path").resolve(path);
    }

    doesExist(path) {
        return fs.existsSync(path)
    }

    loopPath(path) {

    fs.promises.readdir(path)
    .then(dir => {
        for (const directory of dir) {
            this.checkFile(require("path").resolve(path + "/" + directory))
        }
    })
                
    }

    checkFile(path) {
        this.checkFileTypes(path).then(
            type => {
                
                if (type.isDirectory()) {
                    return this.loopPath(path)
                }

                if (type.isFile()) {
                    if (path.endsWith(".js")) {
                        this.loadCommand(path)
                    } else {
                        return;
                    }
                }
            }
        )
    }

    loadCommand(path) {
        delete require.cache[require.resolve(path)]
        const file = require(path)
        const methods = Object.keys(file)
            for (const key of methods) {
                const check = this.bot[key]
                
                if (!check) {
                  if (this.strict === true) {
                    throw new Error(`Invalid Method "${key}" from Path ${path}`)
                  } else {
                      continue;
                  }
                } else {
                    this.bot[key](file[key])
                }
            }
    }

    checkFileTypes(path) {
        return new Promise(resolve => {
            fs.promises.stat(path)
            .then(f => {

                resolve(f)
            })
        })
       }

       deleteBotCommands() {
        for (const key of Object.keys(this.bot.client).filter(f => f.endsWith("ommands"))) {
            this.bot.client[key] = new Collection()
        }
       }

}

module.exports = CommandHandler

